- case: decorator_type_promotion
  parametrized:
    # Test that the duck type is not a float by default
    - plugin: ''
      promote_type: float
      arg_type: float
      output: 'main:8: error: Argument 1 to "foo" has incompatible type "DuckType"; expected "float"  [arg-type]'

    # Same as above, but use the plugin.
    - plugin: pyvista_mypy_plugin
      promote_type: float
      arg_type: float
      output: ''  # No errors. Duck type is promoted and mypy is happy.

    # Test promotion as a subclass.
    - plugin: pyvista_mypy_plugin
      promote_type: int
      arg_type: float
      output: ''

    # Test promotion is one-way.
    - plugin: pyvista_mypy_plugin
      promote_type: float
      arg_type: int
      output: 'main:8: error: Argument 1 to "foo" has incompatible type "DuckType"; expected "int"  [arg-type]'

  mypy_config: |
    plugins = {{ plugin }}
  main: |
    from pyvista_mypy_plugin import promote_type

    @promote_type({{ promote_type }})
    class DuckType: ...
    y: DuckType

    def foo(x: {{ arg_type }}): ...
    foo(y)
  out: |
    {{ output }}


- case: multiple_arguments
  parametrized:

    - plugin: pyvista_mypy_plugin
      type_1: float
      type_2: str
      output: ''

  mypy_config: |
    plugins = {{ plugin }}
  main: |
    from pyvista_mypy_plugin import promote_type

    @promote_type({{ type_1 }},{{ type_2 }})
    class DuckType: ...
    y: DuckType

    def foo(x: {{ type_1 }}): ...
    foo(y)

    def bar(x: {{ type_2 }}): ...
    bar(y)
  out: |
    {{ output }}
